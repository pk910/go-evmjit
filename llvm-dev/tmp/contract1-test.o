; ModuleID = 'contract1-test.ll'
source_filename = "contract1-test.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.evm_callctx = type { %struct.evm_stack*, i64, i64, i32 (i8*, i8, i8*, i16, i16, i64*)*, i8* }
%struct.evm_stack = type { i8*, i64 }

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i128 @llvm.bswap.i128(i128) #0

define i32 @test(%struct.evm_callctx* noundef %callctx) local_unnamed_addr {
entry:
  %stack_gasleft_ptr = alloca i64, align 8
  %callctx_ptr = getelementptr inbounds %struct.evm_callctx, %struct.evm_callctx* %callctx, i64 0, i32 0
  %pc_ptr = getelementptr inbounds %struct.evm_callctx, %struct.evm_callctx* %callctx, i64 0, i32 1
  %gasleft_ptr = getelementptr inbounds %struct.evm_callctx, %struct.evm_callctx* %callctx, i64 0, i32 2
  %gasleft_val = load i64, i64* %gasleft_ptr, align 4
  store i64 %gasleft_val, i64* %stack_gasleft_ptr, align 8
  %heap_stack = load %struct.evm_stack*, %struct.evm_stack** %callctx_ptr, align 8
  %heap_stack_ptr = getelementptr %struct.evm_stack, %struct.evm_stack* %heap_stack, i64 0, i32 0
  %heap_stack_addr = load i8*, i8** %heap_stack_ptr, align 8
  %heap_stack_position_ptr = getelementptr %struct.evm_stack, %struct.evm_stack* %heap_stack, i64 0, i32 1
  %l0_gas2 = icmp ult i64 %gasleft_val, 6
  br i1 %l0_gas2, label %l0_checkerr, label %l0_checkok

l0_checkerr:                                      ; preds = %entry
  %lg0_cmp1 = icmp ult i64 %gasleft_val, 3
  br i1 %lg0_cmp1, label %lg0_gaserr, label %lg3_gaserr

lg0_gaserr:                                       ; preds = %l0_checkerr
  store i64 0, i64* %pc_ptr, align 4
  br label %common.ret

lg3_gaserr:                                       ; preds = %l0_checkerr
  store i64 3, i64* %pc_ptr, align 4
  br label %common.ret

l0_checkok:                                       ; preds = %entry
  %l0_gas4 = add i64 %gasleft_val, -6
  %l2_gas215 = icmp ult i64 %l0_gas4, 34
  br i1 %l2_gas215, label %l2_checkerr, label %l2_checkok.preheader

l2_checkok.preheader:                             ; preds = %l0_checkok
  store i64 17, i64* %pc_ptr, align 4
  br label %l2_checkok

l2_checkerr:                                      ; preds = %l2_checkok, %l2_checkok.1, %l2_checkok.2, %l2_checkok.3, %l2_checkok.4, %l11_jump.5, %l0_checkok
  %l2_gas1.lcssa = phi i64 [ %l0_gas4, %l0_checkok ], [ %l2_gas4, %l2_checkok ], [ %l2_gas4.1, %l2_checkok.1 ], [ %l2_gas4.2, %l2_checkok.2 ], [ %l2_gas4.3, %l2_checkok.3 ], [ %l2_gas4.4, %l2_checkok.4 ], [ %l2_gas4.5, %l11_jump.5 ]
  store i64 %l2_gas1.lcssa, i64* %stack_gasleft_ptr, align 8
  %lg5_cmp1 = icmp eq i64 %l2_gas1.lcssa, 0
  br i1 %lg5_cmp1, label %lg5_gaserr, label %lg5_gasok

lg5_gasok:                                        ; preds = %l2_checkerr
  %lg6_cmp1 = icmp ult i64 %l2_gas1.lcssa, 4
  br i1 %lg6_cmp1, label %lg6_gaserr, label %lg6_maxstackok

lg6_maxstackok:                                   ; preds = %lg5_gasok
  %lg7_cmp1 = icmp ult i64 %l2_gas1.lcssa, 6
  br i1 %lg7_cmp1, label %lg7_gaserr, label %lg7_gasok

lg7_gasok:                                        ; preds = %lg6_maxstackok
  %lg8_cmp1 = icmp ult i64 %l2_gas1.lcssa, 9
  br i1 %lg8_cmp1, label %lg8_gaserr, label %lg8_gasok

lg8_gasok:                                        ; preds = %lg7_gasok
  %lg10_cmp1 = icmp ult i64 %l2_gas1.lcssa, 12
  br i1 %lg10_cmp1, label %lg10_gaserr, label %lg10_minstackok

lg10_minstackok:                                  ; preds = %lg8_gasok
  %lg11_cmp1 = icmp ult i64 %l2_gas1.lcssa, 15
  br i1 %lg11_cmp1, label %lg11_gaserr, label %lg11_gasok

lg11_gasok:                                       ; preds = %lg10_minstackok
  %lg13_cmp1 = icmp ult i64 %l2_gas1.lcssa, 18
  br i1 %lg13_cmp1, label %lg13_gaserr, label %lg13_maxstackok

lg13_maxstackok:                                  ; preds = %lg11_gasok
  %lg14_cmp1 = icmp ult i64 %l2_gas1.lcssa, 21
  br i1 %lg14_cmp1, label %lg14_gaserr, label %lg14_gasok

lg14_gasok:                                       ; preds = %lg13_maxstackok
  %lg15_cmp1 = icmp ult i64 %l2_gas1.lcssa, 24
  br i1 %lg15_cmp1, label %lg15_gaserr, label %lg17_gaserr

lg5_gaserr:                                       ; preds = %l2_checkerr
  store i64 5, i64* %pc_ptr, align 4
  br label %common.ret

lg6_gaserr:                                       ; preds = %lg5_gasok
  store i64 6, i64* %pc_ptr, align 4
  br label %common.ret

lg7_gaserr:                                       ; preds = %lg6_maxstackok
  store i64 7, i64* %pc_ptr, align 4
  br label %common.ret

lg8_gaserr:                                       ; preds = %lg7_gasok
  store i64 8, i64* %pc_ptr, align 4
  br label %common.ret

lg10_gaserr:                                      ; preds = %lg8_gasok
  store i64 10, i64* %pc_ptr, align 4
  br label %common.ret

lg11_gaserr:                                      ; preds = %lg10_minstackok
  store i64 11, i64* %pc_ptr, align 4
  br label %common.ret

lg13_gaserr:                                      ; preds = %lg11_gasok
  store i64 13, i64* %pc_ptr, align 4
  br label %common.ret

lg14_gaserr:                                      ; preds = %lg13_maxstackok
  store i64 14, i64* %pc_ptr, align 4
  br label %common.ret

lg15_gaserr:                                      ; preds = %lg14_gasok
  store i64 15, i64* %pc_ptr, align 4
  br label %common.ret

lg17_gaserr:                                      ; preds = %lg14_gasok
  store i64 17, i64* %pc_ptr, align 4
  br label %common.ret

l2_checkok:                                       ; preds = %l11_jump.5, %l2_checkok.preheader
  %stack_alloc.sroa.5.017 = phi i256 [ 2, %l2_checkok.preheader ], [ %l6_res0.5, %l11_jump.5 ]
  %l2_gas116 = phi i64 [ %l0_gas4, %l2_checkok.preheader ], [ %l2_gas4.5, %l11_jump.5 ]
  %l2_gas4 = add i64 %l2_gas116, -34
  %l2_gas2 = icmp ult i64 %l2_gas4, 34
  br i1 %l2_gas2, label %l2_checkerr, label %l2_checkok.1

l2_checkok.1:                                     ; preds = %l2_checkok
  %l2_gas4.1 = add i64 %l2_gas116, -68
  %l2_gas2.1 = icmp ult i64 %l2_gas4.1, 34
  br i1 %l2_gas2.1, label %l2_checkerr, label %l2_checkok.2

l2_checkok.2:                                     ; preds = %l2_checkok.1
  %l2_gas4.2 = add i64 %l2_gas116, -102
  %l2_gas2.2 = icmp ult i64 %l2_gas4.2, 34
  br i1 %l2_gas2.2, label %l2_checkerr, label %l2_checkok.3

l2_checkok.3:                                     ; preds = %l2_checkok.2
  %l2_gas4.3 = add i64 %l2_gas116, -136
  %l2_gas2.3 = icmp ult i64 %l2_gas4.3, 34
  br i1 %l2_gas2.3, label %l2_checkerr, label %l2_checkok.4

l2_checkok.4:                                     ; preds = %l2_checkok.3
  %l2_gas4.4 = add i64 %l2_gas116, -170
  %l2_gas2.4 = icmp ult i64 %l2_gas4.4, 34
  br i1 %l2_gas2.4, label %l2_checkerr, label %l2_checkok.5

l2_checkok.5:                                     ; preds = %l2_checkok.4
  %l2_gas4.5 = add i64 %l2_gas116, -204
  %l6_res0.5 = add nuw nsw i256 %stack_alloc.sroa.5.017, 6
  %l9_cmp.5 = icmp ult i256 %stack_alloc.sroa.5.017, 44
  br i1 %l9_cmp.5, label %l11_jump.5, label %l11_skip

l11_jump.5:                                       ; preds = %l2_checkok.5
  %l2_gas2.5 = icmp ult i64 %l2_gas4.5, 34
  br i1 %l2_gas2.5, label %l2_checkerr, label %l2_checkok

l11_skip:                                         ; preds = %l2_checkok.5
  store i64 %l2_gas4.5, i64* %stack_gasleft_ptr, align 8
  %l12_gas2 = icmp ult i64 %l2_gas4.5, 8
  br i1 %l12_gas2, label %l12_checkerr, label %l12_checkok

l12_checkerr:                                     ; preds = %l11_skip
  %lg18_cmp1 = icmp ult i64 %l2_gas4.5, 3
  br i1 %lg18_cmp1, label %lg18_gaserr, label %lg20_gaserr

lg18_gaserr:                                      ; preds = %l12_checkerr
  store i64 18, i64* %pc_ptr, align 4
  br label %common.ret

lg20_gaserr:                                      ; preds = %l12_checkerr
  store i64 20, i64* %pc_ptr, align 4
  br label %common.ret

l12_checkok:                                      ; preds = %l11_skip
  %l12_gas4 = add i64 %l2_gas116, -212
  store i64 %l12_gas4, i64* %stack_gasleft_ptr, align 8
  %l13_alloc10 = alloca [3 x i256], align 32
  %l13_alloc10.sub = getelementptr inbounds [3 x i256], [3 x i256]* %l13_alloc10, i64 0, i64 0
  %l13_ptr = bitcast [3 x i256]* %l13_alloc10 to i8*
  store i256 80, i256* %l13_alloc10.sub, align 32
  %l13_in_ptr1 = getelementptr inbounds [3 x i256], [3 x i256]* %l13_alloc10, i64 0, i64 1
  store i256 %l6_res0.5, i256* %l13_in_ptr1, align 32
  %l13_in_ptr2 = getelementptr inbounds [3 x i256], [3 x i256]* %l13_alloc10, i64 0, i64 2
  store i256 61098, i256* %l13_in_ptr2, align 32
  store i64 20, i64* %pc_ptr, align 4
  %l13_fn_ptr_addr = getelementptr inbounds %struct.evm_callctx, %struct.evm_callctx* %callctx, i64 0, i32 3
  %l13_fn_ptr = load i32 (i8*, i8, i8*, i16, i16, i64*)*, i32 (i8*, i8, i8*, i16, i16, i64*)** %l13_fn_ptr_addr, align 8
  %l13_ctx_as_i8 = bitcast %struct.evm_callctx* %callctx to i8*
  %l13_ret = call i32 %l13_fn_ptr(i8* %l13_ctx_as_i8, i8 10, i8* nonnull %l13_ptr, i16 96, i16 32, i64* nonnull %stack_gasleft_ptr)
  %l13_ret_check.not = icmp eq i32 %l13_ret, 0
  br i1 %l13_ret_check.not, label %l13_callback_ok, label %l13_err_callback

l13_err_callback:                                 ; preds = %l12_checkok
  store i64 20, i64* %pc_ptr, align 4
  br label %common.ret

l13_callback_ok:                                  ; preds = %l12_checkok
  %l13_res0 = load i256, i256* %l13_alloc10.sub, align 32
  %out_1 = load i64, i64* %heap_stack_position_ptr, align 8
  %out_2 = getelementptr inbounds i8, i8* %heap_stack_addr, i64 %out_1
  %out_stack_check2 = icmp ugt i64 %out_1, 8160
  br i1 %out_stack_check2, label %common.ret, label %out_ok2

common.ret:                                       ; preds = %lg0_gaserr, %lg3_gaserr, %lg5_gaserr, %lg6_gaserr, %lg7_gaserr, %lg8_gaserr, %lg10_gaserr, %lg11_gaserr, %lg13_gaserr, %lg14_gaserr, %lg15_gaserr, %lg17_gaserr, %lg18_gaserr, %lg20_gaserr, %l13_err_callback, %l13_callback_ok, %out_ok2
  %common.ret.op = phi i32 [ 0, %out_ok2 ], [ -13, %lg0_gaserr ], [ -13, %lg3_gaserr ], [ -13, %lg5_gaserr ], [ -13, %lg6_gaserr ], [ -13, %lg7_gaserr ], [ -13, %lg8_gaserr ], [ -13, %lg10_gaserr ], [ -13, %lg11_gaserr ], [ -13, %lg13_gaserr ], [ -13, %lg14_gaserr ], [ -13, %lg15_gaserr ], [ -13, %lg17_gaserr ], [ -13, %lg18_gaserr ], [ -13, %lg20_gaserr ], [ %l13_ret, %l13_err_callback ], [ -11, %l13_callback_ok ]
  %storemerge = load i64, i64* %stack_gasleft_ptr, align 8
  store i64 %storemerge, i64* %gasleft_ptr, align 4
  ret i32 %common.ret.op

out_ok2:                                          ; preds = %l13_callback_ok
  %out_l0_dst_ptr_lo = bitcast i8* %out_2 to i128*
  %out_l0_dst_ptr_hi = getelementptr i8, i8* %out_2, i64 16
  %0 = bitcast i8* %out_l0_dst_ptr_hi to i128*
  %stack_alloc.sroa.0.0.extract.trunc = trunc i256 %l13_res0 to i128
  %stack_alloc.sroa.0.16.extract.shift = lshr i256 %l13_res0, 128
  %stack_alloc.sroa.0.16.extract.trunc = trunc i256 %stack_alloc.sroa.0.16.extract.shift to i128
  %out_l0_reversed_lo = call i128 @llvm.bswap.i128(i128 %stack_alloc.sroa.0.16.extract.trunc)
  %out_l0_reversed_hi = call i128 @llvm.bswap.i128(i128 %stack_alloc.sroa.0.0.extract.trunc)
  store i128 %out_l0_reversed_lo, i128* %out_l0_dst_ptr_lo, align 4
  store i128 %out_l0_reversed_hi, i128* %0, align 4
  %out_6 = add nuw nsw i64 %out_1, 32
  store i64 %out_6, i64* %heap_stack_position_ptr, align 8
  br label %common.ret
}

attributes #0 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
